import { Transaction } from '.'

let transaction

beforeEach(async () => {
  transaction = await Transaction.create({ transactionStatus: 'test', paymentDollarValue: 'test', merchantId: 'test', cryptocurrencyType: 'test', cryptocurrencyPaid: 'test', paymentCurrency: 'test', network: 'test', addressReceiver: 'test', addressSender: 'test', paymentType: 'test', cryptocurrencyPrice: 'test', transactionId: 'test', shippingName: 'test', shippingEmail: 'test', shippingMobile: 'test', shippingCountry: 'test', shippingAddress: 'test', shippingPostal: 'test', transactionHash: 'test', rewardAwarded: 'test', userId: 'test', merchantType: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = transaction.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(transaction.id)
    expect(view.transactionStatus).toBe(transaction.transactionStatus)
    expect(view.paymentDollarValue).toBe(transaction.paymentDollarValue)
    expect(view.merchantId).toBe(transaction.merchantId)
    expect(view.cryptocurrencyType).toBe(transaction.cryptocurrencyType)
    expect(view.cryptocurrencyPaid).toBe(transaction.cryptocurrencyPaid)
    expect(view.paymentCurrency).toBe(transaction.paymentCurrency)
    expect(view.network).toBe(transaction.network)
    expect(view.addressReceiver).toBe(transaction.addressReceiver)
    expect(view.addressSender).toBe(transaction.addressSender)
    expect(view.paymentType).toBe(transaction.paymentType)
    expect(view.cryptocurrencyPrice).toBe(transaction.cryptocurrencyPrice)
    expect(view.transactionId).toBe(transaction.transactionId)
    expect(view.shippingName).toBe(transaction.shippingName)
    expect(view.shippingEmail).toBe(transaction.shippingEmail)
    expect(view.shippingMobile).toBe(transaction.shippingMobile)
    expect(view.shippingCountry).toBe(transaction.shippingCountry)
    expect(view.shippingAddress).toBe(transaction.shippingAddress)
    expect(view.shippingPostal).toBe(transaction.shippingPostal)
    expect(view.transactionHash).toBe(transaction.transactionHash)
    expect(view.rewardAwarded).toBe(transaction.rewardAwarded)
    expect(view.userId).toBe(transaction.userId)
    expect(view.merchantType).toBe(transaction.merchantType)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = transaction.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(transaction.id)
    expect(view.transactionStatus).toBe(transaction.transactionStatus)
    expect(view.paymentDollarValue).toBe(transaction.paymentDollarValue)
    expect(view.merchantId).toBe(transaction.merchantId)
    expect(view.cryptocurrencyType).toBe(transaction.cryptocurrencyType)
    expect(view.cryptocurrencyPaid).toBe(transaction.cryptocurrencyPaid)
    expect(view.paymentCurrency).toBe(transaction.paymentCurrency)
    expect(view.network).toBe(transaction.network)
    expect(view.addressReceiver).toBe(transaction.addressReceiver)
    expect(view.addressSender).toBe(transaction.addressSender)
    expect(view.paymentType).toBe(transaction.paymentType)
    expect(view.cryptocurrencyPrice).toBe(transaction.cryptocurrencyPrice)
    expect(view.transactionId).toBe(transaction.transactionId)
    expect(view.shippingName).toBe(transaction.shippingName)
    expect(view.shippingEmail).toBe(transaction.shippingEmail)
    expect(view.shippingMobile).toBe(transaction.shippingMobile)
    expect(view.shippingCountry).toBe(transaction.shippingCountry)
    expect(view.shippingAddress).toBe(transaction.shippingAddress)
    expect(view.shippingPostal).toBe(transaction.shippingPostal)
    expect(view.transactionHash).toBe(transaction.transactionHash)
    expect(view.rewardAwarded).toBe(transaction.rewardAwarded)
    expect(view.userId).toBe(transaction.userId)
    expect(view.merchantType).toBe(transaction.merchantType)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
